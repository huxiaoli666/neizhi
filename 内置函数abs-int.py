
						
******************************************************************************************
abs()函数    
描述：返回数字的绝对值。    
语法：abs( x )  	参数：x -- 数值表达式，可以是整数，浮点数，复数    
返回值：函数返回 x（数字）的绝对值，如果参数是一个复数，则返回它的大小。
# 案例：
print ("abs(-40) : ", abs(-40))
print ("abs(100.10) : ", abs(100.10))
******************************************************************************************
dict()函数 	 
描述：用于创建一个字典。     
语法：class dict(**kwarg)                    参数：**kwargs -- 关键字。    
	  class dict(mapping, **kwarg)			 参数：mapping -- 元素的容器。
	  class dict(iterable, **kwarg)			 参数：iterable -- 可迭代对象。
返回值：返回一个字典。
# 案例：
dict()                        # 创建空字典
{}
>>> dict(a='a', b='b', t='t')     # 传入关键字
{'a': 'a', 'b': 'b', 't': 't'}
>>> dict(zip(['one', 'two', 'three'], [1, 2, 3]))   # 映射函数方式来构造字典
{'three': 3, 'two': 2, 'one': 1} 
>>> dict([('one', 1), ('two', 2), ('three', 3)])    # 可迭代对象方式来构造字典
{'three': 3, 'two': 2, 'one': 1}
******************************************************************************************
help()函数 		
描述：用于查看函数或模块用途的详细说明。  	
语法：help([object])   参数：object -- 对象；
返回值：返回对象帮助信息。
# 案例：
>>>help('sys')             # 查看 sys 模块的帮助
……显示帮助信息……
 
>>>help('str')             # 查看 str 数据类型的帮助
……显示帮助信息……
 
>>>a = [1,2,3]
>>>help(a)                 # 查看列表 list 帮助信息
……显示帮助信息……
 
>>>help(a.append)          # 显示list的append方法的帮助
……显示帮助信息……
***********************************************************************************************
min()函数  	
描述：返回给定参数的最小值，参数可以为序列。   
语法：min( x, y, z, .... )  	参数：x -- 数值表达式    y -- 数值表达式   z -- 数值表达式
返回值：返回给定参数的最小值。
# 案例：
print ("min(80, 100, 1000) : ", min(80, 100, 1000))
print ("min(-20, 100, 400) : ", min(-20, 100, 400))
print ("min(-80, -20, -10) : ", min(-80, -20, -10))
print ("min(0, 100, -400) : ", min(0, 100, -400))
************************************************************************************************
setattr()函数    
描述：setattr 函数对应函数 getatt()，用于设置属性值，该属性必须存在。
语法：setattr(object, name, value)    
参数：object -- 对象   name -- 字符串，对象属性。 value -- 属性值。
返回值：无
# 案例：
class A(object):
    bar = 1

a = A()
getattr(a, 'bar')          # 获取属性 bar 值
1   					   # 结果1
setattr(a, 'bar', 5)       # 设置属性 bar 值
a.bar
5  						   # 结果5
*********************************************************************************************
all()函数
描述：all() 函数用于判断给定的可迭代参数 iterable 中的所有元素是否不为 0、''、False 或者 iterable 为空，如果是返回 True，否则返回 False。
语法：all(iterable)   	参数：iterable -- 元组或列表。
返回值：如果iterable的所有元素不为0、''、False或者iterable为空，all(iterable)返回True，否则返回False；

		注意：空元组、空列表返回值为True，这里要特别注意。
# 案例：
all(['a', 'b', 'c', 'd'])  # 列表list，元素都不为空或0
True
all(['a', 'b', '', 'd'])   # 列表list，存在一个为空的元素
False
all([0, 1，2, 3])          # 列表list，存在一个为0的元素
False
   
all(('a', 'b', 'c', 'd'))  # 元组tuple，元素都不为空或0
True
all(('a', 'b', '', 'd'))   # 元组tuple，存在一个为空的元素
False
all((0, 1，2, 3))          # 元组tuple，存在一个为0的元素
False
   
all([])             # 空列表
True
all(())             # 空元组
True
************************************************************************************************
dir()函数
描述：dir() 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。如果参数包含方法__dir__()，该方法将被调用。如果参数不包含__dir__()，该方法将最大限度地收集参数信息
语法：dir([object])			参数：object -- 对象、变量、类型
返回值：返回模块的属性列表。
# 案例：
>>>dir()   #  获得当前模块的属性列表
['__builtins__', '__doc__', '__name__', '__package__', 'arr', 'myslice']
>>> dir([ ])    # 查看列表的方法
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', 
'__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', 
'__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', 
'__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', 
'__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', 
'__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 
'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>>
*************************************************************************************************
hex()函数
描述：用于将10进制整数转换成16进制，以字符串形式表示
语法：hex(x)  参数：x -- 10进制整数
返回值：返回16进制数，以字符串形式表示。
# 案例：
>>>hex(255)
'0xff'
>>> hex(-42)
'-0x2a'
>>> hex(1L)
'0x1L'
>>> hex(12)
'0xc'
>>> type(hex(12))
class 'str'      # 字符串
*************************************************************************************************
next()函数
描述：next() 返回迭代器的下一个项目
语法：next(iterator[, default])  
参数：iterator -- 可迭代对象
	  default -- 可选，用于设置在没有下一个元素时返回该默认值，
	  			 如果不设置，又没有下一个元素则会触发 StopIteration 异常。
返回值：返回对象帮助信息。
# 案例：
'''首先获得Iterator对象:'''
it = iter([1, 2, 3, 4, 5])
'''循环:'''
while True:
    try:
        # 获得下一个值:
        x = next(it)
        print(x)
    except StopIteration:
        # 遇到StopIteration就退出循环
        break
*************************************************************************************************
slice()函数
描述：实现切片对象，主要用在切片操作函数里的参数传递。
语法：class slice(stop)       			
	  class slice(start, stop[, step]) 	
参数：start -- 起始位置     stop -- 结束位置    step -- 间距
返回值：返回一个切片对象。
# 案例：
>>>myslice = slice(5)    # 设置截取5个元素的切片
>>> myslice
slice(None, 5, None)
>>> arr = range(10)
>>> arr
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> arr[myslice]         # 截取 5 个元素
[0, 1, 2, 3, 4]
>>>
***********************************************************************************************88
any()函数    python2.5以上版本可以使用
描述：用于判断给定的可迭代参数 iterable 是否全部为空对象，
	  如果都为空、0、false，则返回 False，如果不都为空、0、false，则返回 True
语法：any(iterable)     		参数：iterable -- 元组或列表。
返回值：如果都为空、0、false，则返回false，如果不都为空、0、false，则返回true。
# 案例：
>>>any(['a', 'b', 'c', 'd'])  # 列表list，元素都不为空或0
True
 
>>> any(['a', 'b', '', 'd'])   # 列表list，存在一个为空的元素
True
 
>>> any([0, '', False])        # 列表list,元素全为0,'',false
False
 
>>> any(('a', 'b', 'c', 'd'))  # 元组tuple，元素都不为空或0
True
 
>>> any(('a', 'b', '', 'd'))   # 元组tuple，存在一个为空的元素
True
 
>>> any((0, '', False))        # 元组tuple，元素全为0,'',false
False
  
>>> any([]) # 空列表
False
 
>>> any(()) # 空元组
False
***************************************************************************************
divmod()函数   	在 python 2.3 版本之前不允许处理复数。
描述：python divmod() 函数把除数和余数运算结果结合起来，
	  返回一个包含商和余数的元组(a // b, a % b)。
语法：divmod(a, b)   	参数：a: 数字     b: 数字
返回值：无
# 案例：
>>>divmod(7, 2)
(3, 1)
>>> divmod(8, 2)
(4, 0)
>>> divmod(1+2j,1+0.5j)
((1+0j), 1.5j)
***************************************************************************************
id()函数
描述：用于获取对象的内存地址。
语法：id([object])   参数：object -- 对象
返回值：返回对象的内存地址。
# 案例：
>>>a = 'runoob'
>>> id(a)
4531887632
>>> b = 1
>>> id(b)
140588731085608
***************************************************************************************
object()函数 
***************************************************************************************
sorted()函数
描述：对所有可迭代的对象进行排序操作。
sort 与 sorted 区别：
	sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。

	list 的 sort 方法返回的是对已经存在的列表进行操作，
	而内建函数 sorted 方法返回的是一个新的 list，
	不是在原来的基础上进行的操作。
语法：sorted(iterable, key=None, reverse=False)
参数：iterable -- 可迭代对象。
	  key -- 主要是用来进行比较的元素，只有一个参数，
	  		 具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
	  reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。
返回值：返回重新排序的列表。

# 案例：
>>>sorted([5, 2, 3, 1, 4])
[1, 2, 3, 4, 5]                    # 默认为升序

你也可以使用 list 的 list.sort() 方法。这个方法会修改原始的 list（返回值为None）。通常这个方法不如sorted()方便-如果你不需要原始的 list，list.sort()方法效率会稍微高一些。
>>>a=[5,2,3,1,4]
>>> a.sort()
>>> a
[1,2,3,4,5]

另一个区别在于list.sort() 方法只为 list 定义。而 sorted() 函数可以接收任何的 iterable。
>>>sorted({1: 'D', 2: 'B', 3: 'B', 4: 'E', 5: 'A'})
[1, 2, 3, 4, 5]

利用key进行倒序排序
>>>example_list = [5, 0, 6, 1, 2, 7, 3, 4]
>>> result_list = sorted(example_list, key=lambda x: x*-1)
>>> print(result_list)
[7, 6, 5, 4, 3, 2, 1, 0]
>>>

要进行反向排序，也通过传入第三个参数 reverse=True：
>>>example_list = [5, 0, 6, 1, 2, 7, 3, 4]
>>> sorted(example_list, reverse=True)
[7, 6, 5, 4, 3, 2, 1, 0]
**************************************************************************************
ascii()函数
描述：ascii() 函数类似 repr() 函数, 返回一个表示对象的字符串, 
	  但是对于字符串中的非 ASCII 字符则返回通过 repr() 函数
	  使用 \x, \u 或 \U 编码的字符。 生成字符串类似 Python2 版本中 repr() 函数的返回值。
语法：ascii(object) 			 参数：object -- 对象。
返回值：返回字符串。
# 案例：
>>> ascii('runoob')
"'runoob'"
****************************************************************************************
enumerate()函数
描述：用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，
	  同时列出数据和数据下标，一般用在 for 循环当中。
语法：enumerate(sequence, [start=0])				
参数：sequence -- 一个序列、迭代器或其他支持迭代对象。
	  start -- 下标起始位置。
返回值：返回 enumerate(枚举) 对象。
# 案例：
>>>seasons = ['Spring', 'Summer', 'Fall', 'Winter']
>>>list(enumerate(seasons))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
>>>list(enumerate(seasons, start=1))       # 小标从 1 开始
[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]


普通的 for 循环
>>>i = 0
>>>seq = ['one', 'two', 'three']
>>>for element in seq:
...    print(i, seq[i])
...    i += 1
... 
0 one
1 two
2 three


for 循环使用 enumerate
>>>seq = ['one', 'two', 'three']
>>>for i, element in enumerate(seq):
...    print(i, seq[i])
... 
0 one
1 two
2 three
>>>
************************************************************************************************
input()函数 			python3 里 input() 默认接收到的是 str 类型
描述：Python3.x 中 input() 函数接受一个标准输入数据，返回为 string 类型。

	  Python2.x 中 input() 相等于 eval(raw_input(prompt)) ，用来获取控制台的输入。

	  raw_input() 将所有输入作为字符串看待，返回字符串类型。
	  而 input() 在对待纯数字输入时具有自己的特性，它返回所输入的数字的类型（ int, float ）。

	  注意：input() 和 raw_input() 这两个函数均能接收 字符串 ，但 raw_input() 直接读取控制台的输入（任何类型的输入它都可以接收）。
	  		而对于 input() ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError 。
	 		除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。

语法：input([prompt])   参数：prompt: 提示信息
# 案例：
input() 需要输入 python 表达式
>>>a = input("input:")
input:123                  # 输入整数
>>> type(a)
<type 'int'>               # 整型
>>> a = input("input:")    
input:"runoob"           # 正确，字符串表达式
>>> type(a)
<type 'str'>             # 字符串
>>> a = input("input:")
input:runoob               # 报错，不是表达式
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<string>", line 1, in <module>
NameError: name 'runoob' is not defined
<type 'str'>


raw_input() 将所有输入作为字符串看待
>>>a = raw_input("input:")
input:123
>>> type(a)
<type 'str'>              # 字符串
>>> a = raw_input("input:")
input:runoob
>>> type(a)
<type 'str'>              # 字符串
>>>
*********************************************************************************************
oct()函数
描述：将一个整数转换成8进制字符串。
语法：oct(x)   参数：oct(x)
返回值：返回8进制字符串。
# 案例：
>>>oct(10)
'012'
>>> oct(20)
'024'
>>> oct(15)
'017'
>>>
*********************************************************************************************
staticmethod()函数
描述：返回函数的静态方法。
语法：staticmethod(function) 		参数：无
返回值：无
# 案例：
class C(object):
    @staticmethod
    def f():
        print('runoob');
 
C.f();          # 静态方法无需实例化
cobj = C()
cobj.f()        # 也可以实例化后调用
*********************************************************************************************
bin()函数
描述：返回一个整数 int 或者长整数 long int 的二进制表示。
语法：bin(x)   		参数：x -- int 或者 long int 数字
返回值：字符串。
# 案例：
>>>bin(10)
'0b1010'
>>> bin(20)
'0b10100'
*********************************************************************************************
eval()函数
描述：用来执行一个字符串表达式，并返回表达式的值。
语法：eval(expression[, globals[, locals]])   		
参数：expression -- 表达式。
	  globals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。
	  locals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。
返回值：返回表达式计算结果。
# 案例：
>>>x = 7
>>> eval( '3 * x' )
21
>>> eval('pow(2,2)')
4
>>> eval('2 + 2')
4
>>> n=81
>>> eval("n + 4")
85
*********************************************************************************************
int()函数
描述：用于将一个字符串或数字转换为整型。
语法：class int(x, base=10)    参数：x -- 字符串或数字。    base -- 进制数，默认十进制。
返回值：返回整型数据
# 案例：
>>>int()               # 不传入参数时，得到结果0
0
>>> int(3)
3
>>> int(3.6)
3
>>> int('12',16)        # 如果是带参数base的话，12要以字符串的形式进行输入，12 为 16进制
18
>>> int('0xa',16)  
10  
>>> int('10',8)  
8